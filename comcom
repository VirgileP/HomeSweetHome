#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

#define NON_TROUVE -1 //constante de test
#define MAX_SPECTACLES 200

#define MAX_SPECTACLE 200
#define MAX_CLIENT 10000
#define MAX_PL_Rich 862
#define MAX_PL_STUDIO 136
#define MAX_ABO 100

#define MAX_TITRE 200
#define T_MAX_NOM 10
#define T_MAX_PRENOM 10

#define CATA 372
#define CATB 218
#define CATC 205
#define CATP 65
#define CATH 2



/*----------Declaration preliminaire-------------------------------*/

//modules de chargement des données à partir des fichiers

void chargement_spectacle()							;
void chargement_representation()					;
void chargement_placesrichelieu()					;
void initialisation(int tab[])						;

//modules de traitement des données
void selection_theatre()							;
void affichage_programmation()						;
void affichage_representation(int indice)			;
void tarifs()										;
int recherche(char nomrech[MAX_TITRE], int tabres[]);

void resa_studio_verif()							;
void resa_studio()									;
void resa_richelieu()								;

void verif_cat(char place[])						;
void verif_zone(int borne_debut, int borne_fin)		;
void recap()										;

void paiement()										;
void abonnement()									;
void conv_aff(char tab[])							;
void conv_maj(char tab[])							;
void conv_date(char tab[])							;


//modules administration
void Mot_de_passe();
void menu_admin()	;
void saisie()		;
void annulation()	;





/*---------------------Declaration enregistrement-------------------------------*/

//est-elle encore utile ? 
struct client
    {
     char 	titre[10]				;
     char	nom[T_MAX_NOM]      ;
     char	prenom[T_MAX_NOM]	;
     int 	age					;	//attention en saisie
     int 	numadresse			;
     char  rueadresse[15]			;
     int	codePostal			;
     char	ville[10]				;
     // char	pays[10]				;
     int	telephone			;
     char mail[30]				;
     int	numabo              ;
     int nbplacesres			; //faire attention en saisie. 
    };
    

// enregistrement permettant de stocker toutes les informations pour un spectacle
struct spectacle 
{
	char nom[MAX_TITRE]				;
	char auteur[100]				;
	char M_en_scene[200]			;
	char date_debut[200]			;
	char date_fin[200]				;
	char salle[400]					;
};

//enregistrement permettant de stocker des représentations
struct piece 
{
	char nom[MAX_TITRE];
	char date[11];
	char heure[10];
};

//enregistrement permettant de stocker toutes les informations des salles 
struct theatre
{
	char categorie[13]			;
	char zone[50]				;
	int numpl					;
	char rangpl					;
	int etat					;
};

//enregistrement permettant de stocker toutes les informations sur les tarifs 
struct tarifs
{
	char nom[20]				;
	char type_tarifs[40]		;
	char categorie				;
	char type_client[40]		;
	int prix					;
};

//encore utile ? 
//enregistrement permettant de stocker toutes les informations sur les réservations au STUDIO
struct reserv_studio
{
	char spectacle[MAX_TITRE]			;
	int jour							;
	int mois							;
	int annee							;
	int tab_places[MAX_PL_STUDIO]		;
};

//enregistrement permettant de stocker, à chaque étape, le parcours du client 
struct parcour_client{
	struct spectacle spec				;
	struct piece repre					;
	struct theatre tab_nb_rese[5]		;
	struct client panier				; //encore utile ?
};

//enregistrement permettant de stocker l'abonnement
struct abonnement{
	struct client client;
	struct spectacle tab_spec[MAX_ABO];
	struct piece date[MAX_ABO];
	struct theatre rich;
	struct reserv_studio studio;
};


/*-----------------variables globales--------------------*/
struct spectacle tab_program[500]				; // pour stocker toutes les pièces pour toutes les salles de la comédie
struct theatre place_richelieu[MAX_PL_Rich]		; // pour stocker toutes les places de la salle Richelieu
struct theatre tab_copie[MAX_PL_Rich]			;
struct piece tab_repre[500]						; // pour stocker toutes les représentations par pièces
struct client tabclient[MAX_CLIENT]				;//encore utile ?
struct tarifs tab_individuels[30]				;//pour stocker tous les tarifs
struct parcour_client parcour					; //pour stocker un parcours client
struct parcour_client tab_abo[3]				; //pour un abonnement de 4 spectacles
struct reserv_studio tabstudio[10]				; //encore utile ? 
int nbclients = 0								; //pour la saisie par l'administration
int nbplace_resa = 0							;
int nbplace_dispo = 0							;
int nbspecglob = 0								; // nombre de pièces totales disponibles pour toute la comédie française
int nbrepreglob = 0								;
int nbplacetot = 0								;
int	nbspectheatre = 0							;		
int nbspecrepre = 0								;
int tab_indice_spec[MAX_SPECTACLES]				;
//identification des salles du théâtre
char frichelieu[20] = "RICHELIEU"				; 
char fcolombier[20] = "COLOMBIER"				;
char fstudio[20] = "STUDIO"						;

//ajout 
int nbplace=0, choix = NON_TROUVE				;
int borne_debut = 0, borne_fin = 0				;
int tab_indice_zone[20]							;

//studio
int stock = 0; //utile ce truc est-ce ? 

//abonnement
struct abonnement abo							;
struct abonnement tab_abonne[MAX_TITRE]			;
int nbabonnement								;

/*-----------------------------------------*/
main()
{
	int choix = NON_TROUVE, nboccurrences = 0, i, numero	;
	char p_recherche[MAX_TITRE]								;
	struct spectacle representation							;
	int tabresultats[MAX_SPECTACLES]						;
	
	while (choix != 0)
	{
		printf("+-----------------+\n")					 	;
		printf("|Comédie Française|\n")					 	;
		printf("+-----------------+\n\n")					;
		chargement_spectacle()									;
		chargement_representation()									;//le bulot a √©t√© charg√©e
		chargement_placesrichelieu()								;//la loutre nage a plein gaz
		initialisation(tab_indice_spec)	 					;//tableau initialis√©
		printf("-1- Programation\n")	 		;
		printf("-2- Test paiement\n")	 		;
		printf("-3- Tarifs\n")					;
		printf("-4- Rechercher un spectacle\n")	; 
		printf("-5- Administration\n")			;
		printf("-6- Test places richelieu\n")	;	
		printf("-7- Abonnement\n")				;
		printf("-0- Quitter\n")					;
		printf("Choix : ")						;
		scanf("%d",&choix)						;
		
		switch(choix)
		{
			case 1: selection_theatre()	;
					break				;
			case 2: paiement()			;//affichage_place()	;
					break				;
			case 3: tarifs()			;
					break				;
			case 4:if (nbspecglob == 0)
					{
						printf("Aucune pièce n'est actuellement disponible.\n");
					}
					else
					{
						printf("Entrez le premier mot de la pièce recherchée : ");
						scanf("%s", p_recherche);
						//test printf("%s", p_recherche);
						conv_maj(p_recherche)	;
						//printf("%s", p_recherche);
						conv_aff(p_recherche);
						//printf("%s", p_recherche);
						nboccurrences = recherche(p_recherche, tabresultats);
						if(nboccurrences == 0)
						{
							printf("\nAucun spectacle dont le nom commence par %s n'a été trouvé.\n",p_recherche);
						}
						else
						{
						
							for (i = 0;i < nboccurrences;i++)
								{
									numero = tabresultats[i];
									representation = tab_program[numero];
									printf("%s %s %s %s %s\n", representation.nom, representation.auteur, representation.M_en_scene, representation.date_debut, representation.date_fin);
								}
						}
					}
					break	;
			case 5: Mot_de_passe();
					break;
			case 6: //cherche_categorie ()			;
					break;
			case 7: abonnement()					;
					break;
			case 0: printf("Au revoir\n")	; //module de sauvegarde ?
					break				;
			default : printf("Erreur de saisie, veuillez Recommencer.\n")	;
					break							;
		}
		
	}
}
/*________________________________________________________________________________________*/
/*__//choix du theâtre_//choix du spectacle//choix de la représentation___________________*/

/*--------------selection théâtre------------------*/

void selection_theatre()
{
	int choix = NON_TROUVE;
	
	//Le choix du théâtre est stockée dans le parcours du client. 
	
	while(choix != 0)
	{
		printf("+------------+\n");
		printf("|Les Theatres|\n");
		printf("+------------+\n\n");
		
		printf("-1- Salle Richelieu\n");
		printf("-2- Theatre du Vieux-Colombier\n");
		printf("-3- Studio-Theatre\n");
		printf("-0- Retour au menu\n");
		printf("Selectionnez votre salle : ");
		scanf("%d", &choix);
		
		switch(choix)
		{
			case 1: strcpy(parcour.spec.salle,frichelieu);
					affichage_programmation(frichelieu);
					break;
			case 2: strcpy(parcour.spec.salle,fcolombier); 
					affichage_programmation(fcolombier);
					break;
			case 3: strcpy(parcour.spec.salle,fstudio);	
					affichage_programmation(fstudio);
					break;
			case 0: main();
					break;
			default : printf("Erreur de saisie\n");
					break;	
		}
		
	}
}


/*-------------affichage des spectacles en fonction du théâtre sélectionné-----------*/
void affichage_programmation(char nomtheatre[])
{
	int i, selec = 0, spectheatre = 0, choix = NON_TROUVE, indice = 0; //nb de spectacle dipo par théâtre en fonction de la demande (Richelieu, Vx-Colombier, Studio)
	printf("+-------------+\n");
 	printf("|Programmation|\n");
    printf("+-------------+\n");
	
	//test de la salle dans parcour
	printf("%s", parcour.spec.salle)	;
	
		for (i = 0 ; i < nbspecglob; i++)
	{
		if (strcmp(nomtheatre,tab_program[i].salle) == 0)
		{
			printf("-%d-\n", spectheatre+1); //ajout de 1 pour l'affichage
			printf("nom de la piece : %s\n", tab_program[i].nom)				; 
    		printf("nom de l'auteur : %s\n", tab_program[i].auteur)	  			;	 
    		printf("nom metteur en scene : %s\n", tab_program[i].M_en_scene)	;
    		printf("nom date de d‚àö¬©but : %s\n", tab_program[i].date_debut)	;
    		printf("nom date de fin : %s\n\n", tab_program[i].date_fin)  		;
			
			//on utilise spectheatre comme indice pour stocker la valeur de l'indice i qui permettra de retrouver la ligne contenantle nom de la pièce dans tab_program
			tab_indice_spec[spectheatre] = i; 
			spectheatre = spectheatre +1;  
			
    	}
	}
	nbspectheatre = spectheatre; 
	
	while( choix != 0) 
	{
		printf("Pour selectionner le spectacle saisissez son numéro.\n");
		printf("Pour revenir au menu principal saisissez 0.\n"); //pour faire appelle au nom de la pièce dans la fonction d'affichage des représentations
		printf("Saisissez votre choix : ");
		scanf("%d",&selec);
		
		if(selec == 0) 
		{
			main();
		}
		else if((selec >= 1)||(selec <= nbspectheatre)) 
		{
			indice = selec-1;
			affichage_representation(indice); 
			choix = 0;
		}
		else
		{
			printf("Erreur, vous devez saisir un nombre entre 1 et %d, saisir 0 pour revenir au menu principal : \n",nbspectheatre);
		}
	}
}

/*------------affichage des représentations en fonction du spectacle sélectionné---------*/

void affichage_representation(int indice)
{
	int i, repre = 0, stock_indice = -1, trouve = 0;
	char comp[MAX_TITRE];
	char stock_date[11];
	struct piece date;
	
	strcpy(date.date,"00/00/2016");
	printf("\nSELECTION\n\n");
	printf("Vous avez sélectionné : \n");
	
	//sortir le nom correspondant à l'indice du spectacle dans le tab_programm
	if (tab_indice_spec[indice] == NON_TROUVE)
	{
		printf("Erreur, la valeur retournée est %d\n",tab_indice_spec[indice]);
	}
	else
	{
		stock_indice = tab_indice_spec[indice];
	}
	strcpy(comp,tab_program[stock_indice].nom);
	conv_maj(comp);
	strcpy(parcour.spec.nom,comp); 
	printf("%s\n", comp);
	
	//comparer ce nom avec celui présent dans représentation ne fonctionne pas après 7
	for ( i =0; i<nbspecglob; i++)
	{
		if (strcmp(comp, tab_repre[i].nom) == 0)//afficher toutes les dates disponibles correspondant au spectacle sélectionné
		{
			if((strcmp(tab_repre[i].nom,date.date)) != 0) //exclusion des dates a 0
			{
				printf("%s %s\n", tab_repre[i].date, tab_repre[i].heure);
			
			repre = repre +1;
			}	
		}
	}
	nbspecrepre = repre;
	printf("Veuillez saisir la date de votre choix (JJ/MM/AAAA) : \n");
	printf("0 pour revenir au menu principal\n");
	scanf ("%s", stock_date);
	
	
	if (atoi(stock_date) == 0)
		{
			selection_theatre();
		}
	else
		{
			i = 0											;
			while ((i<nbspecglob)&&(trouve == 0))
			{
				if (strcmp(comp, tab_repre[i].nom) == 0)//afficher toutes les dates dispo correspondant au spectacle sélectionné
				{
					if(((strcmp(tab_repre[i].nom,date.date)) != 0)&&((strcmp(stock_date,tab_repre[i].date) ==0)))//exclusion des dates a 0
					{
						trouve = 1;
					}
				}
				i = i+1	;
		}
			if(trouve)
			{
				strcpy(parcour.repre.date,stock_date);
				
				if (strcmp(parcour.spec.salle,frichelieu) == 0)
				{ 				
				resa_richelieu();
				main();
				}
				else if (strcmp(parcour.spec.salle,fstudio) == 0)
				{ 
				resa_studio_verif();
				main(); 
				}
				//else if (strcmp(parcour.spec.salle,fcolombier) == 0)
				//{
				//resa_colombier();
				//main();
				//}
			}
			
		printf("Erreur, la date sélectionnée n'existe pas\n");
		
	}
	
}	
	

/*----------fontion pour la selection de place (tableau de structure richelieu??)--------*/
void resa_richelieu ()
{

	char categorie[20];
	struct theatre richelieu;
	struct parcour_client resa;
	FILE *f1;
	char nom_fichier[100] ="\0";
	
	int i, trouve =0, trouve1 = 0, trouve2 =0, choix = NON_TROUVE, nbplace =nbplace_resa, indice_zone = 0, selec_zone= -1, indice_stop=0, cpt, verif=0, continu=0;
	int dispo_a=CATA, dispo_b=CATB, dispo_c=CATC, dispo_p=CATP, dispo_h=CATH;

	while (choix != 0)
	{
		while((nbplace<1)||(nbplace>6)) // selection nombre de place
		{
			printf("\nCombien de places souhaitez vous reserver (6 max)?  ");
			printf("[0 pour revenir aux choix des spectacles]\n");
			scanf("%d", &nbplace);
			nbplace_resa= nbplace; //stockage dans variable global pour faire tourner la boucle de rÈservation
			if((nbplace<1)&&(nbplace>6))
			{
				printf("Vous devez saisir un nombre entre 1 et 6\n");
			}
			else if(nbplace == 0)
			{
				choix=0;
				affichage_programmation(parcour.spec.salle);
			}
		}
		
		choix =0;
	}
/*----------------vÈrification disponibilitÈ place---------------*/
	
	choix = NON_TROUVE;
	while(choix !=0)
	{
		resa = parcour;
		strcat(nom_fichier, resa.spec.nom);
		strcat(nom_fichier,"_");
		conv_date(resa.repre.date);
		strcat(nom_fichier, resa.repre.date);
		//printf("%s",resa.repre.date);
		strcat(nom_fichier,".txt\0");
		//printf("%s\n", nom_fichier);
		
		if (fopen(nom_fichier,"r") != NULL)
		{
			f1=fopen(nom_fichier,"r"); //condition de vÈrification du nombre de place ‡ supprimer
			i=0;
			while(! feof(f1))
    		{
    			fscanf(f1, "%s %s %d %c %d", richelieu.categorie, richelieu.zone, &richelieu.numpl, &richelieu.rangpl, &richelieu.etat);
    			tab_copie[i]=richelieu; //chargement des enregistrements dans le tableau de structure
    			if((strcmp(tab_copie[i].categorie,"A") ==0)&&(tab_copie[i].etat== 0))
    			{
    				dispo_a = dispo_a -1;
				}
				else if((strcmp(tab_copie[i].categorie,"B") ==0)&&(tab_copie[i].etat== 0))
				{
					dispo_b = dispo_b -1;
				}
				else if((strcmp(tab_copie[i].categorie,"C") ==0)&&(tab_copie[i].etat== 0))
				{
					dispo_c = dispo_c -1;
				}
				else if((strcmp(tab_copie[i].categorie,"PETIT_BUREAU") ==0)&&(tab_copie[i].etat== 0))
				{
					dispo_p = dispo_p -1;
				}
				else if((strcmp(tab_copie[i].categorie,"HANDICAPE") ==0)&&(tab_copie[i].etat== 0))
				{
					dispo_h = dispo_h -1;
				}

				i=i+1;
			}
			fclose(f1);
			nbplace_dispo = i-1;
			printf("place disponible, A: %d, B: %d, C: %d PETIT_BUREAU: %d, HANDICAPE: %d\n", dispo_a, dispo_b, dispo_c, dispo_p, dispo_h);
			
			printf("Veuillez s√©lectionner votre cat√©gorie (A, B, C ou PETIT_BUREAU) : ");
			scanf("%s", categorie);
			conv_maj(categorie);
			printf("%s",categorie);
			for(i=0; i<nbplace_resa; i++)
			{
				strcpy(parcour.tab_nb_rese[i].categorie, categorie);
			}
			
			while(choix !=0)
			{
				if (strcmp(parcour.tab_nb_rese[0].categorie, "A") ==0)
				{
					if(nbplace_resa<= dispo_a)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_a);
						selection_theatre();
					}
				}
				else if (strcmp(parcour.tab_nb_rese[0].categorie, "B") ==0)
				{
					if(nbplace_resa<= dispo_b)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_b);
						selection_theatre();
					}
				}
				else if (strcmp(parcour.tab_nb_rese[0].categorie, "C") ==0)
				{
					if(nbplace_resa<= dispo_c)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_c);
						selection_theatre();
					}
				}
				else if (strcmp(parcour.tab_nb_rese[0].categorie, "PETIT_BUREAU") ==0)
				{
					if(nbplace_resa<= dispo_p)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_p);
						selection_theatre();
					}
				}
				else if (strcmp(parcour.tab_nb_rese[0].categorie, "HANDICAPE") ==0)
				{
					if(nbplace_resa<= dispo_h)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_h);
						selection_theatre();
					}
				}
			}	
		}
		else //si le fichier n'existe pas!
		{
			for(i=0; i<MAX_PL_Rich; i++)
			{
				tab_copie[i]=place_richelieu[i];
				//printf("%s %s %d %c %d", tab_copie[i].categorie, tab_copie[i].zone, tab_copie[i].numpl, tab_copie[i].rangpl, tab_copie[i].etat);
			}
			nbplace_dispo=i-1;
			
			
			printf("Veuillez s√©lectionner votre cat√©gorie (A, B, C ou PETIT_BUREAU) : ");
			scanf("%s", categorie);
			conv_maj(categorie);
			for(i=0; i<nbplace_resa; i++)
			{
				strcpy(parcour.tab_nb_rese[i].categorie, categorie);
			}			
	 		while(choix !=0)
			{
				if (strcmp(parcour.tab_nb_rese[0].categorie, "A") ==0)
				{
					if(nbplace_resa<= dispo_a)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_a);
						selection_theatre();
					}
				}
				else if (strcmp(parcour.tab_nb_rese[0].categorie, "B") ==0)
				{
					if(nbplace_resa<= dispo_b)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_b);
						selection_theatre();
					}
				}
				else if (strcmp(parcour.tab_nb_rese[0].categorie, "C") ==0)
				{
					if(nbplace_resa<= dispo_c)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_c);
						selection_theatre();
					}
				}
				else if (strcmp(parcour.tab_nb_rese[0].categorie, "PETIT_BUREAU") ==0)
				{
					if(nbplace_resa<= dispo_p)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_p);
						selection_theatre();
					}
				}
				else if (strcmp(parcour.tab_nb_rese[0].categorie, "HANDICAPE") ==0)
				{
					if(nbplace_resa<= dispo_h)
					{
						verif_cat(categorie);
						verif_zone(borne_debut, borne_fin);
						choix =0;
					}
					else
					{
						printf("Il reste %d places dans cette catÈgorie", dispo_h);
						selection_theatre();
					}
				}
			}
			
		}
		recap();
		
/*-----------Ècriture des modification dans le fichier de gestion des spectacles-------*/		
		//printf("%s %s %d %c %d\n", tab_copie[0].categorie, tab_copie[0].zone, tab_copie[0].numpl, tab_copie[0].rangpl, tab_copie[0].etat);
		
		f1=fopen(nom_fichier,"w");
		printf("je commence a ecrire\n");
		for(i= 0; i<nbplace_dispo; i++)
		{
			
			richelieu = tab_copie[i];
			//printf("%s %s %d %c %d", richelieu.categorie, richelieu.zone, richelieu.numpl, richelieu.rangpl, richelieu.etat);
			fprintf(f1, "%s %s %d %c %d\n", richelieu.categorie, richelieu.zone, richelieu.numpl, richelieu.rangpl, richelieu.etat);
		}
		fclose(f1);
		printf("a tout fini\n");
		printf("votre place a ÈtÈ enregistrÈ\n");	
			
		choix=0;	
	}
}	


/*--------------------Recherche d'une pièce par son titre----------------------*/
int recherche(char prefixe_p_rech[MAX_TITRE], int tabres[])
{
	struct spectacle representation	;
	int i, numrech = NON_TROUVE, nbocc = 0;
	int taille_prefixe ; 

	taille_prefixe = strlen(prefixe_p_rech)	;	
	for (i = 0; i < nbspecglob ; i++)
	{
	representation = tab_program[i]; 
	
		if (strncmp(representation.nom,prefixe_p_rech,taille_prefixe) == 0)
		{
		tabres[nbocc++] = i;
		}
	}
	return nbocc;
}
/*--------------Sécurité Administration-------------------*/
void Mot_de_passe()
{
	//bandeau d'accueil
	printf("+------------------------------------+\n")	;
	printf("| Comédie Française - Administration |\n")	;
	printf("+------------------------------------+\n\n")	;
	
	//d‚Äö√†√∂‚àö‚Ä†claration des variables utilis‚Äö√†√∂‚àö‚Ä†es pour l'authentification
	char login_saisi[20]					;
	char login_verif[20]="ADMIN"				;
	char mdp_saisi[8]					;
	char mdp_verif [8]="BONJOUR"				;
	int reponse=0						;
	int test,test2,i					;

	//saisie du login et du mot de passe pour acc‚Äö√†√∂‚àö‚Ä†der ‚Äö√Ñ√∂‚àö√ë¬¨‚àû l'interface administrateur
	
	// Premier Essai pour la saisie du  login
	printf("Entrez votre login : ");
	scanf("%s",login_saisi);
	
	conv_maj(login_saisi);
	test = strcmp(login_saisi, login_verif);
		
		//Deuxi‚Äö√†√∂‚àö¬£me essai pour la saisie du login
		if (test != 0)
		{
		printf("Erreur d'authentification\n");
		printf("Recommencer la saisie du login : ");
		scanf("%s",login_saisi);
		conv_maj(login_saisi);

		test = strcmp(login_saisi, login_verif);
			
			//Au bout de deux erreurs sur le login, retour au menu principal
			if(test !=0)
			{
			printf("\nAcc√®s Interdit.\n");
			printf("Vous allez ‚Äö√™tre redirig√© vers le menu d'accueil.\n\n");
			}
		}
	
	//Premier essai pour la saisie du mot de passe
	if( test == 0)
	{
	printf("Entrez votre mot de passe : ");
	scanf("%s", mdp_saisi);
	conv_maj(mdp_saisi);
			
	test2 = strcmp(mdp_saisi, mdp_verif);
	}
		//Deuxi‚Äö√†√∂‚àö¬£me essai pour la saisie du mot de passe
		if (test2 != 0)
		{
		printf("Erreur d'authentification.\n");
		printf("Recommencer la saisie du mot de passe : ");
		scanf("%s",mdp_saisi);
	
		conv_maj(mdp_saisi);
		
		test2 = strcmp(mdp_saisi, mdp_verif);
			
			//Au bout de deux erreurs sur le login, retour au menu principal
			if(test2 !=0)
			{
			printf("\nAccès Interdit.\n");
			printf("Vous allez être redirigé vers le menu d'accueil.\n\n");
			}
		}	
				
		
	//L'authentification r‚Äö√†√∂‚àö‚Ä†ussie donne acc‚Äö√†√∂‚àö¬£s ‚Äö√Ñ√∂‚àö√ë¬¨‚àû la partie administration du logiciel
	if ((test == 0)&&(test2 == 0))
		{
		printf("Accès autorisé.\n");
		menu_admin();
		}
}

/*-----------------Menu Administration----------------------------*/
void menu_admin()
{
	int choix = -1;
	while (choix!= 0)
	{
	//bandeau menu administration
	printf("+----------------------------------+\n")	;
	printf("|Comédie Française - Administration|\n")	;
	printf("+----------------------------------+\n\n")	;
	
	printf("Veuillez effectuer un choix : \n")			;
	printf("-1- Saisie\n")								;
	printf("-2- Modification\n")						;
	printf("-0- Quitter le menu administration\n")	;
	printf("Choix : ")									;
	scanf("%d",&choix)									;		
			switch (choix)
			{
				case 1:	saisie()						;	
					break								;
				case 2: annulation()						;
				case 0:	printf("Retour au menu général\n");
						printf("Au revoir\n")			;
					break								;
			}		
	}
}

/*--------------------Saisie----------------------------*/
void saisie()
{
	struct client acheteur	;
	int i = nbclients 		;

	acheteur.nom[0] = '\0'	;//strcpy(acheteur.nom," ");
	
	while (strcmp(acheteur.nom,"FIN") != 0)
	{
	printf("Entrez votre nom (fin pour terminer) : ");
	scanf("%s", acheteur.nom);
	conv_maj(acheteur.nom);
		if (strcmp(acheteur.nom,"FIN") != 0)
		{
		printf("Entrez votre pénom : ");
		scanf("%s", acheteur.prenom);	
		printf("Entrez votre num‚àö¬©ro d'adresse (ex : 83) : "); //diviser en num‚àö¬©ro, rue, ...?
		scanf("%d", &acheteur.numadresse);
		printf("Entrez votre nom de rue (ex : montorgueil) : ");
		scanf("%s", acheteur.rueadresse);
		printf("Entrez votre code postal : ");
		scanf("%d", &acheteur.codePostal);
		printf("Entrez votre ville : ");
		scanf("%s", acheteur.ville);
		printf("Entrez votre telephone : ");
		scanf("%d", &acheteur.telephone);
		printf("Entrez votre mail : ");
		scanf("%s", acheteur.mail);
		tabclient[i++] = acheteur ;
		}	
	}
	nbclients = i		;
}
/*--------------------Annulation------------------------*/
void annulation()
{

printf("Hello\n");
}

//*-------vÈrification catÈgorie*/
/*-------vÈrification catÈgorie*/
void verif_cat(char place[])
{
	int i, trouve1 = 0, trouve2 =0, choix = NON_TROUVE;
	
	while(choix !=0)
	{
		/*for (i=0; i<nbplace_resa; i++) 
		{
			strcpy(parcour.tab_nb_rese[i].categorie, place);
			//printf("cat %s enreg pour le  client %d",parcour.tab_nb_rese[i].categorie, i );
		}
		/* Int√àgrer un test pour savoir si il reste suffisemment de place dans cette catg√àorie*/
		printf("je suis rentre dans verif cat");
		i = 0;
		while ((i<MAX_PL_Rich)&&(trouve1 == 0))
		{
			//printf("coucou c'est dans la tab de struc placerichelieu %s\n", tab_copie[i].categorie); test
			if((strcmp(place,tab_copie[i].categorie) == 0)&&(tab_copie[i].etat !=0))
			{
				trouve1 = 1; // ici i = la 1√ãre ligne oÀò apparait la valeur dans le tableau de structure de tab_copie[]
				//printf("suis je ici ? \n");
			}
			i++; 
		}
		borne_debut = i-1;
		printf("valeur borne-debut = %d\n", borne_debut);
	
		while ((i<MAX_PL_Rich)&&(trouve2 == 0))
		{
			if(strcmp(tab_copie[i].categorie,tab_copie[i+1].categorie) != 0)
			{
				//printf("i = %d\n", i)		; test valeur de i
				trouve2 = 1					;
				//printf("suis je l‡?");
			}
			i++; 
		}
		borne_fin = i-1;
	
		printf("test de la valeur de la sortie de boucle pour la borne-fin i = %d\n\n",borne_fin);
		
		if((trouve1 == 0)&&(trouve2 == 0))
		{
			printf("Element non trouv√©\n");
		}
		else
		{
			printf ("Element trouv√© : %s\n", place); //affichage de la cat‚àö¬©gorie de la place
			choix =0;
			printf("allons vers la zone\n");
			//cherche_zone(borne_debut, borne_fin); // ‡ supprimer
		}
	}		
}

/*----------vÈrification zone------------*/
void verif_zone(int debut, int fin)
{
	struct theatre tab_zone[CATA];
	int indice_zone = 0, selec_zone= -1, i, nb_zone =0, max_place=0, cpt, tab_indice[50],stock, i2;
	choix = NON_TROUVE;
	while(choix !=0)
	{
		printf("j'entre dans la zone\n");		
/*-------selection zone pouvant accueillir le nombre de place sÈlÈectionnÈes-----*/		
		indice_zone = 0;
		stock=0;
			for (i=debut ; i <= fin; i++)
	{
		
		if (strcmp(place_richelieu[i].zone,place_richelieu[i+1].zone) != 0)
		{
			printf("-%d- %s\n", indice_zone+1, place_richelieu[i].zone);
    		//printf("%d\n", indice_zone); // test valeur indice zone	
			tab_indice_zone[indice_zone] = i; //on utilise tab_indice comme indice pour stocker la valeur de l'indice i qui permettra de retrouver la ligne contenant
												//le nom de la zone dans le tableau de structure tab_program
    		//printf("affichage tab_indice_spec[indice_zone] = %d\n",tab_indice_spec[indice_zone]);
			indice_zone = indice_zone +1;  
    	}
	}
		nb_zone=indice_zone;
				
		/*for (i=debut ; i <= fin; i++)
		{	cpt=nbplace_resa;
			if (strcmp(tab_copie[i].zone,tab_copie[i+1].zone) != 0) //affichage des zones par catÈgorie
			{
				tab_zone[indice_zone] = tab_copie[i]
				printf("-%d- %s\n", indice_zone+1, tab_zone[indice_zone].zone);
    			//printf("%d\n", indice_zone); // test valeur indice zone	
			    //on utilise tab_indice comme indice pour stocker la valeur de l'indice i qui permettra de retrouver la ligne contenant
												//le nom de la zone dans le tableau de structure tab_program
    			//printf("affichage tab_indice_spec[indice_zone] = %d\n",tab_indice_spec[indice_zone]);
				indice_zone = indice_zone +1;  
    		}
    	}
    	nb_zone=indice_zone*/    	
    	  	
    	printf("Pour selectionner votre zone saisissez le numero correspondant : ");
		scanf("%d", &selec_zone);
		//printf("j'affiche l'indice de zone selectionnee %d", selec_zone);
		
		if ((selec_zone >=0)||(selec_zone<indice_zone))
		{
			printf("vous avez selectionne la zone %s\n", tab_zone[tab_indice[selec_zone-1]].zone );
			for (i=0; i<nbplace_resa; i++)
			{
				strcpy(parcour.tab_nb_rese[i].zone, tab_zone[tab_indice[selec_zone-1]].zone);
				//printf("zone %s enreg pour le  client %d",parcour.tab_nb_rese[i].zone, i );
				//resa_richelieu();
				choix=0;
			}
		}
		else
		{
			printf("Erreur, la zone selectionner n'est pas la bonne\n");
		}
	}
}
/*-------------------fonction de vÈrification------------*/
void recap()
{
	int trouve=0, i, cpt, conf=0, verif=0, continu=0, choix = NON_TROUVE, indice_stop=0;
	

	
		printf("-1- Confirmer\n");
		printf("-2- Annuler (retour au menu principal)\n");
		scanf("%d", &conf);
		printf("%d", nbplace_dispo);
		if (conf == 1)
		{
	
			/*for(i=0; i<nbplace_resa; i++)
			{
				printf("recap parcour %d %s %s %d %c",i,parcour.tab_nb_rese[i].categorie, parcour.tab_nb_rese[i].zone, parcour.tab_nb_rese[i].numpl, parcour.tab_nb_rese[i].rangpl);
			}*/
			
			i=0;
			while((i<nbplace_dispo)&&(trouve ==0))
			{
				cpt=0;
				if ((strcmp(tab_copie[i].categorie,parcour.tab_nb_rese[cpt].categorie) == 0)&&(strcmp(tab_copie[i].zone,parcour.tab_nb_rese[cpt].zone) ==0)&&(tab_copie[i].etat !=0))
				{
					trouve=1;
					//printf("trouve = %d", trouve);
					verif= i;
				}
				i= i+1;
			}
			
			
			if(trouve)
			{
				//printf("je rentre");
				for(i=0; i<nbplace_resa; i++)
				{
					parcour.tab_nb_rese[i]=tab_copie[verif];
					tab_copie[verif].etat=0;
					verif=verif+1;
				}
			}
			//printf("au revoir recap");
			choix=0;
		}
		else if (conf == 2)
		{
			choix = 0;
			main();
		}
		else
		{
			printf("Erreur, vous n'avez pas saisie le bon nombre\n");
		}
	
}

/*-----------------Résa Studio------------------------*/
void resa_studio_verif()
{

/* Import du parcours client */
	
	struct parcour_client resa;
	FILE *f1;
	char nom_fichier[100] ="\0";
	int i = 0, nbplace = NON_TROUVE, place, j, dispo = MAX_PL_STUDIO, maxdispo = 6	;
	int places_studio[MAX_PL_STUDIO],test = 0;
	char nom_fichier_temp[100];
	
	//on récupère la date et le spectacle via la super structure parcours

	resa = parcour;
	strcat(nom_fichier, resa.spec.nom);
	strcat(nom_fichier,"_");
	conv_date(resa.repre.date);
	strcat(nom_fichier, resa.repre.date);
	strcat(nom_fichier,".txt")	;

	strcpy(nom_fichier_temp,nom_fichier);	//mémoire en locale

	//Vérification de la disponibilité pour la date et le spectacle et 
	if (fopen(nom_fichier,"r") != NULL)
	{
		printf("Suis-je ici ? \n")		; // à tej
		test = 1						; //pour la suite
		f1=fopen(nom_fichier,"r")		;
		while (! feof(f1))
		{
		fscanf(f1, "%d", &place)		;
		places_studio[i] = place		;
			if (places_studio[i] == 0)
			{
			dispo = dispo - 1			; //fonctionnel restant places
			}
		i = i +1						;
		}
		fclose(f1)						;
	}
	else
	{
	 	printf("Suis-je là nouveau ? \n"); //à tej
	 	printf("Places disponibles.\n")	;
	 	test = 2; //pour la suite
		f1=fopen("plstudio.txt","r")			; //ouverture du fichier type avec les places
		while (! feof(f1))
		{
		fscanf(f1, "%d", &place)		;	
		places_studio[i] = place		;
		i = i + 1;
		//pour un spectacle complet, retour au main, à améliorer si temps. 
		if (dispo == 0)
		{
		printf("Le spectacle est complet, vous ne pouvez pas réserver à cette date.\n");
		main();
		}
		}
		fclose(f1);
		dispo = MAX_PL_STUDIO			;
	}

	printf("disponibles places = %d\n", dispo);
	
		if (dispo < 6)
			{
			maxdispo = dispo;
			printf("Il ne reste que %d places", maxdispo);
			}
			
			//maxdispo permet de vérifier la disponibilité restante des places et de limiter 
			// le choix des places à la capacité des places qu'il reste
	
	while((nbplace<1)||(nbplace>maxdispo))
		{
			printf("Combien de places souhaitez vous reserver (%d max)?\n", maxdispo);
			printf("[0 pour annuler et revenir à l'accueil]\n");
			printf("Choix : ");
			scanf("%d", &nbplace);
			if (nbplace == 0)
			{
			main();
			}else
			{ 
			resa.panier.nbplacesres = nbplace;
			parcour = resa;	
			printf("%d places\n", resa.panier.nbplacesres);
			paiement();
			if((nbplace<1)||(nbplace>6))
			{
				printf("Vous devez saisir un nombre entre 1 et %d\n", maxdispo);
			}
			}
		}
}		

/*------------------------enregistrement des places--------------------------*/
void resa_studio()
{

	struct parcour_client resa;
	FILE *f1;
	char nom_fichier[100] ="\0";
	int i = 0, nbplace = NON_TROUVE, place, j, dispo = MAX_PL_STUDIO, maxdispo = 6	;
	int places_studio[MAX_PL_STUDIO],test = 0;
	char nom_fichier_temp[100];
	
	//on récupère la date et le spectacle via la super structure parcours

	resa = parcour;
	strcat(nom_fichier, resa.spec.nom);
	strcat(nom_fichier,"_");
	conv_date(resa.repre.date);
	strcat(nom_fichier, resa.repre.date);
	strcat(nom_fichier,".txt")	;

	strcpy(nom_fichier_temp,nom_fichier);	//mémoire en locale
	
	printf("%d places\n", resa.panier.nbplacesres);
	nbplace = resa.panier.nbplacesres;
	
	//Vérification de la disponibilité pour la date et le spectacle et 
	if (fopen(nom_fichier,"r") != NULL)
	{
		printf("Suis-je ici ? \n")		; // à tej
		test = 1						; //pour la suite
		f1=fopen(nom_fichier,"r")		;
		while (! feof(f1))
		{
		fscanf(f1, "%d", &place)		;
		places_studio[i] = place		;
			if (places_studio[i] == 0)
			{
			dispo = dispo - 1			; //fonctionnel restant places
			}
		i = i +1						;
		}
		fclose(f1)						;
	}
	else
	{
	 	printf("Suis-je là nouveau ? \n"); //à tej
	 	printf("Places disponibles.\n")	;
	 	test = 2; //pour la suite
		f1=fopen("plstudio.txt","r")			; //ouverture du fichier type avec les places
		while (! feof(f1))
		{
		fscanf(f1, "%d", &place)		;	
		places_studio[i] = place		;
		i = i + 1;
		//pour un spectacle complet, retour au main, à améliorer si temps. 
		if (dispo == 0)
		{
		printf("Le spectacle est complet, vous ne pouvez pas réserver à cette date.\n");
		main();
		}
		}
		fclose(f1);
		dispo = MAX_PL_STUDIO			;
	}
	
	printf("test = %d\n", test);
	printf("nbplace = %d\n", nbplace); 
	
	//cas  nouvelle réservation
	if (test == 2)
	{
	printf("et donc on réserve\n"); //à tej 
	for (i = 0; i < nbplace; i++)
		{
		places_studio[i] = 0		;		//on sauvegarde le nombre de places réservées.	
		}
	}
	
	//cas d'un spectacle ayant déjà des réservations
	if (test ==1)
	{
	i = 0, j = 0	;
	while (( i < MAX_PL_STUDIO)&&(j < nbplace))
	{
		if (places_studio[i] == -1)
		{
		places_studio[i] = 0		;
		j = j +1					;
		}
		i = i + 1					;
	}
	}

	f1=fopen(nom_fichier_temp,"w")							;
	for (i = 0 ; i < MAX_PL_STUDIO; i++)
		{
			fprintf(f1, "%d\n", places_studio[i])		;
		}
	fclose(f1);
	
	printf("Votre souhait a bien été pris en compte.\n")	;
	printf("Merci pour votre commande.\n")					;
	main();
}

/*---------------------Paiement----------------------*/
void paiement()
{


	tarifs();

	printf("+----------------------------+\n")					 	;
	printf("|Comédie Française - Paiement|\n")					 	;
	printf("+----------------------------+\n\n")					;
		
	struct parcour_client resa;
	FILE *f1;
	char nom_fichier[100] ="\0";
	int i, j;
	int places_studio[MAX_PL_STUDIO],test = 0;
	char nom_fichier_temp[100];
	int nbplace,tab_age[5],tab_prix[5],total = 0;//6 indices 6 passagers
	// test sauvegarde
	int achat = NON_TROUVE;

	resa = parcour;
	strcat(nom_fichier, resa.spec.nom);
	strcat(nom_fichier,"_");
	strcat(nom_fichier, resa.repre.date);
	strcat(nom_fichier,".txt")	;
	
	printf("Votre réservation : \n");
	printf("Dans notre salle %s\n", parcour.spec.salle);
	conv_aff(resa.spec.nom);
	printf("Pour %s\n", resa.spec.nom);
	//conv_date(resa.repre.date);
	printf("le %s\n", resa.repre.date);
	printf("%d places\n", resa.panier.nbplacesres);
	
	nbplace = resa.panier.nbplacesres;
	
	int pro[5] , choix = NON_TROUVE;
	//initialisation du tableau de situation professionnelle
	//initialisation de la variable tab_age[i] pour rentrer dans la boucle

	for (i = 0; i < 5; i++)
	{
		pro [i] = NON_TROUVE;
		tab_age[i] = NON_TROUVE;
	}	
			
		//recueil des informations clients pour calculer le prix
		
	printf("Merci de renseigner vos informations personnelles pour connaître votre tarif\n");

		//situation professionnelle de l'acheteur
	while ((pro[0] != 1)&&(pro[0] != 2))
	{
			printf("Etes-vous êtes demandeur d'emploi ou touchez le RSA ? \n");
			printf("-1- Oui\n");
			printf("-2- Non\n");
			scanf("%d", &pro[0]);
			printf("Choix : ");

				if ((pro[0] != 1)&&(pro[0] != 2))
					{
						printf("Vous ne pouvez saisir que les valeurs 1 et 2.\n");
						printf("Merci de Recommencer\n");
					}
				if(pro[0] == 1)
					{
						printf("Un justificatif vous sera demandé.\n");
					}
	}
			
					
		
		//age de l'acheteur	
	while ((tab_age[0] <= 7)&&(tab_age[0] <= 110))
	{
		printf("Merci d'indiquez votre âge : ");
		scanf("%d", &tab_age[0]);
		if ((tab_age[0] <= 7)&&(tab_age[0] <= 110))
			{
				printf("Veuillez saisir un âge valable\n");
				printf("Les spectateurs de moins de 7 ans ne sont pas autorisés.\n");
			}
	}			
	
	//age et situation professionnelle des spectateurs liés à l'acheteur
	if (nbplace > 1)
		{
		printf("Merci de renseigner, pour chaque spectateur, ses informations personnelles\n")	;
		for (i = 1; i<nbplace ;i++)
			{
			while ((pro[i] != 1)&&(pro[i] != 2))
				{
					printf("Le spectateur %d est-il demandeur d'emploi ou touche-t-il le RSA ?\n", i);
					printf("-1- Oui\n");
					printf("-2- Non\n");	
					printf("Choix : ");
					scanf("%d", &pro[i]);
				
				if ((pro[i] != 1)&&(pro[i] != 2))
					{
						printf("Vous ne pouvez saisir que les valeurs 1 et 2.\n");
						printf("Merci de Recommencer\n");
					}
					if(pro[i] == 1)
						{
							printf("Un justificatif vous sera demandé.\n");
						}
				}
			
				//age des spectateurs	
			while ((tab_age[i] <= 7)&&(tab_age[i] <= 110))
				{
				printf("Entrez l'age du spectateur %i : ", i);
				scanf("%d", &tab_age[i]);
				
					if ((tab_age[i] <= 7)&&(tab_age[i] <= 110))
					{
					printf("Veuillez saisir un âge valable\n");
					printf("Les spectateurs de moins de 7 ans ne sont pas autorisés.");
					}				
				}
			}
			}	//fin du if nbplace > 1
			

//calcul prix par salle, catégorie, spectateur et somme vers total.
			
			//richelieu
			if (strcmp(parcour.spec.salle,frichelieu) == 0) //pour identifier la salle
			{
				printf("Richelieu\n");
				
			
						
	printf("Votre réservation : \n");
	printf("Dans notre salle %s\n", parcour.spec.salle);
	conv_aff(resa.spec.nom);
	printf("Pour %s\n", resa.spec.nom);
	//conv_date(resa.repre.date);
	printf("le %s\n", resa.repre.date);
	printf("%d places\n", resa.panier.nbplacesres);
	
	nbplace = resa.panier.nbplacesres;
	

				
				for (i = 0;i < nbplace;i++)
						{
							if (pro[i] == 1) //prix chômeur
								{		
									if (strcmp(parcour.tab_nb_rese[0].categorie, "A") ==0) //prix chômeur A
									{
										tab_prix[i] = tab_individuels[3].prix;
									}
									else if (strcmp(parcour.tab_nb_rese[0].categorie, "B") ==0)	//prix chômeur B
									{
										tab_prix[i] = tab_individuels[9].prix;
									}
									else //prix chômeur C(strcmp(parcour.tab_nb_rese[0].categorie, "C") ==0)
									{
										tab_prix[i] = tab_individuels[16].prix;
									}
									
									tab_prix[i] = tab_individuels[25].prix; //chomeur prix indice;
								}
							else			//prix or chômeur, donc par âge
								{
									if (tab_age[i] <= 28) //tarif moins de 28 et 18
										{
										if (tab_age[i] <= 18) //tarif moins de 18
											{
												for (i = 0; i < nbplace; i++)
												{
													if (tab_age[i] > 18) //si un adulte au moins
														{
															if (strcmp(parcour.tab_nb_rese[0].categorie, "A") ==0)//prix mineur A
																{
																	tab_prix[i] = tab_individuels[1].prix;
																}
															else if (strcmp(parcour.tab_nb_rese[0].categorie, "B") ==0)		//prix mineur B
																{	
																	tab_prix[i] = tab_individuels[7].prix;
																}
															else //prix chômeur C(strcmp(parcour.tab_nb_rese[0].categorie, "C") ==0)
																{
																	tab_prix[i] = tab_individuels[14].prix;
																}	
														}	
												}	
											}
										else				//18-28 ans
											{
												if (strcmp(parcour.tab_nb_rese[0].categorie, "A") ==0) //prix -28 A
													{
														tab_prix[i] = tab_individuels[2].prix;
													}
												else if (strcmp(parcour.tab_nb_rese[0].categorie, "B") ==0)	//prix -28 B
													{
														tab_prix[i] = tab_individuels[8].prix;
													}
												else //prix -28 C(strcmp(parcour.tab_nb_rese[0].categorie, "B") ==0)
													{
														tab_prix[i] = tab_individuels[15].prix;
													}
											}
									}
								else
									{
										if (strcmp(parcour.tab_nb_rese[0].categorie, "A") ==0) //prix chômeur A
											{
												tab_prix[i] = tab_individuels[3].prix;
											}
										else if (strcmp(parcour.tab_nb_rese[0].categorie, "B") ==0)	//prix chômeur B
											{
												tab_prix[i] = tab_individuels[9].prix;
											}
										else //prix chômeur C (strcmp(parcour.tab_nb_rese[0].categorie, "C") ==0)
											{
										tab_prix[i] = tab_individuels[16].prix;
											}
									}
							}			
			}//for richelieu
		}//if rechelieu
			
	//vieux colombier
	if (strcmp(parcour.spec.salle,fcolombier) == 0) //vérifier nom fcolombier
			{
			
				printf("Vieux Colombier\n");
				
				for (i = 0;i < nbplace;i++)
					{
						if (pro[i] == 1) //prix chômeur
							{
							tab_prix[i] = tab_individuels[20].prix; //chomeur prix indice;
							}
						else			//prix or chômeur, donc par âge
							{
								if (tab_age[i] <= 28) //tarif moins de 28 et 18
									{
										if (tab_age[i] <= 18) //tarif moins de 18
											{
												for (j = 0; j < nbplace; j++)
												{
													if (tab_age[j] > 18)
													{
														tab_prix[i] = tab_individuels[18].prix;
													}	
												}	
											}
										else				//18-28 ans
											{
												tab_prix[i] = tab_individuels[19].prix;//prix 18-28;
											}
									}
								else
								{
									tab_prix[i] = tab_individuels[17].prix; //plein tarifs
								}
							}
						}//fin for vieux colombier
					}//fin if vieuxcolombier
	
	//studio
	if (strcmp(parcour.spec.salle,fstudio) == 0)
			{
				printf("studio\n");
					
					for (i = 0;i < nbplace;i++)
					{
						if (pro[i] == 1) //prix chômeur
							{
							tab_prix[i] = tab_individuels[25].prix; //chomeur prix indice;
							}
						else			//prix or chômeur, donc par âge
							{
								if (tab_age[i] <= 28) //tarif moins de 28 et 18
									{
										if (tab_age[i] <= 18) //tarif moins de 18
											{
												for (j = 0; j < nbplace; j++)
												{
													if (tab_age[j] > 18)
													{
														tab_prix[i] = tab_individuels[24].prix;  //prix  moins de 18 si un adulte au moins
													}	
												}	
											}
										else				//18-28 ans
											{
												tab_prix[i] = tab_individuels[23].prix;//prix 18-28
											}
									}
								else
								{
									tab_prix[i] = tab_individuels[22].prix; //plein tarifs
								}
							}
						}//fin for studio
					}//fin if studio
						
						
					
			//les prix sont stockés, on peut procéder au recapitulatif et au calcul du total			
				
			
			for (i = 0; i < nbplace;i++)
				{
					printf("spectateur %d = age %d = prix %d\n", i, tab_age[i], tab_prix[i]);
					total = total + tab_prix[i];//calcul du total qu'importe le théâtre
				}
	
			printf("Récapituler réservation à ajouter\n");
			printf("Total = %d\n", total);
			
		while ((achat != 1)&&(achat != 2))
		{
			if 	((achat != 1)&&(achat != 2))
			{	
			printf("Souhaitez vous validez votre commande et procéder au paiement ?\n");
			printf("-1- Oui\n")		;
			printf("-2- Non. (vous perdrez toutes les informations relatives à votre commande\n");
			printf("Choix : ")		;
			scanf("%d", &achat)		;
			printf("Erreur de saisie, veuillez recommencer.\n")			;
			}
		}
	
			
		if (achat == 1)
			{
				printf("Saisie des informations du client\n");
				printf("On prend les places dans le fichier\n");
				resa_studio();
				printf("On appelle ici la fonction\n");
				printf("On dit merci pour la commande, bye\n");
			}

}//fin paiement			
			

/*----------------------Abonnement ---------------------*/

void abonnement()
{
	printf("Hello World\n");
}
/*{
	int rep = 0, rep1 = 3, i = 0, nbspecabo=0, cpt, nbspecrepre=0, repre=0, spectheatre = 0, trouve;
	char comp[100], stock_date[100];
	struct abonnement pabo;
	FILE *f1;
	struct piece date;
	
	
	//1 seul fichier pour tout les clients il faut donc l'ouvrir
	if (fopen("abonne.txt","r") != NULL)
	{
		i=0;
		f1=fopen("abonne.txt","r"); //ouverture du fichier abonnnment pour renger dans le tab de strcut les abonné existant
		while(! feof(f1))
		{
			fscanf(f1, "%s %s %d %s %d %s %d %s", pabo.client.nom, pabo.client.prenom, &pabo.client.numadresse, pabo.client.rueadresse, &pabo.client.codePostal, pabo.client.ville, &pabo.client.telephone, pabo.client.mail);
			tab_abonne[i]= pabo;
			i=i+1;
		}
		fclose(f1);
		nbabonnement= i;
	}
	
	while((rep != 1)&&(rep != 2))
	{
		printf("Vous souhaitez souscrire à un abonnement?\n");
		printf("-1- oui\n");
		printf("-2- non\n");
		scanf("%d", &rep);
	
		if( rep==1)
		{
			while((rep1 < 4 )||(rep1>=nbspecglob))
			{
				printf("A combien de spectacle souhaitez vous vous abonner (4min)?\n");
				scanf("%d", &rep1); //stock la va du nombre de spectacle voulu
			}
		}
		else if (rep == 2)
		{
			main();
		}
		else
		{
			printf("Erreur, vous devez saisir 1 ou 2");
		}
	}
	
	printf("+---------------------+\n");
	printf("|Bulletin d'abonnement|\n");
	printf("+---------------------+\n");
	
	printf("Nom : ");
	scanf("%s", abo.client.nom);
	printf("\nPrenom : ");
	scanf("%s", abo.client.prenom); 
	printf("\nAdresse :\n");
	printf("  Numero : ");
	scanf("%d", &abo.client.numadresse);
	printf("\n  Rue : ");
	scanf("%s", abo.client.rueadresse);
	printf("\n  Code Postal : ");
	scanf("%d", &abo.client.codePostal);
	printf("\n  Ville : ");
	scanf("%s", abo.client.ville);
	printf("\nTelephone : ");
	scanf("%d", &abo.client.telephone);
	printf("\nMail : ");
	scanf("%s", abo.client.mail);
	
// selection des spectacles + ajout de LA_MER dans les specatcles
	strcpy(date.date,"00/00/2016");
	printf("1 spectacle obligatoire, La Mer ajoutee...\n");
	strcpy(abo.tab_spec[0].nom,"LA_MER");
	strcpy(abo.date[0].nom,"LA_MER");
	strcpy(abo.tab_spec[0].salle,frichelieu);
	
	for (i = 0 ; i < nbspecglob; i++)
	{
		conv_maj(tab_program[i].nom);
		if (strcmp("LA_MER",tab_program[i].nom) == 0)
		{
			printf("-%d-\n", spectheatre+1); 
			
			conv_aff(tab_program[i].nom);
			printf("nom de la piece : %s\n", tab_program[i].nom)			; 
			printf("salle: %s\n", tab_program[i].salle);
    		printf("nom de l'auteur : %s\n", tab_program[i].auteur)	  		; 
    		printf("nom metteur en scene : %s\n", tab_program[i].M_en_scene);
    		printf("nom date de dà򬩢ut : %s\n", tab_program[i].date_debut)	;
    		printf("nom date de fin : %s\n\n", tab_program[i].date_fin)  	;
			
			tab_indice_spec[spectheatre] = i; // range en valeur les indices des différents spectacles 
			spectheatre = spectheatre +1;  
    	}
	}
	nbspecabo = spectheatre;
	
	printf("Vous avez souhaitez vous abonner a %d spectacles",rep1);
	for (i = 0 ; i < rep1; i++)
	{
		printf("\nSelectionnez le spectacle numero %d\n", i+1);
		printf("Saisisez le numéro correspond au spectacle désiré : ");
		scanf("%d", &rep);
		strcpy(abo.tab_spec[i+1].nom,tab_program[tab_indice_spec[rep-1]].nom); // l'indice 0 de abo.tab_spec est déjà occupé par La Mer
		strcpy(abo.tab_spec[i+1].salle,tab_program[tab_indice_spec[rep-1]].salle); //attention rep correspondant à l'indice qui sort la valeur sotck 
	}													// dans tab_indice cette valeur est l'indice du spectacle correspondant dans tab_program
	
// affichage de tous les specatcles
	printf("Vous avez selectionnez les spectacles suivant :\n");
	for (i = 0 ; i < rep1; i++)
	{
		printf("-%d- %s", i+1, abo.tab_spec[i].nom);
		strcpy(abo.date[i].nom,abo.tab_spec[i].nom);
		conv_maj(abo.date[i].nom);
	}
	
// affichage des representation pour chaque spectacle
	
	
	for(cpt=0; cpt < rep1; cpt++)
	{
		printf("Selection de la date pour %s:\n", abo.tab_spec[cpt].nom);
		strcpy(comp,abo.date[cpt].nom);
		for ( i =0; i<nbrepreglob; i++)
		{
			if (strcmp(comp, tab_repre[i].nom) == 0)//afficher toutes les dates dispo correspondant au spectacle svʬectionnvɍ
			{
				if((strcmp(tab_repre[i].nom,date.date)) != 0) //exclusion des dates a 0
				{
					printf("%s %s\n", tab_repre[i].date, tab_repre[i].heure);
			
				repre = repre +1;
				}	
			}
		}
		nbspecrepre = repre;
		printf("Veuillez saisir la date de votre choix (JJ/MM/AAAA) : \n");
		scanf ("%s", stock_date);
		
		i = 0											;
		while ((i<nbspecrepre)&&(trouve == 0))
		{
			if (strcmp(comp, tab_repre[i].nom) == 0)//afficher toutes les dates dispo correspondant au spectacle sélectionné				
			{
				if(((strcmp(tab_repre[i].nom,date.date)) != 0)&&((strcmp(stock_date,tab_repre[i].date) ==0)))//exclusion des dates a 0
				{
					strcpy(abo.date[cpt].date,tab_repre[i].date);
					strcpy(abo.date[cpt].date,tab_repre[i].heure);
					trouve = 1;
				}
			}
			i = i+1	;
		}
				
	}
	
// affichage de tous les specatcles + representation
	printf("Vous avez selectionnez les spectacles et les dates suivant :\n");
	for (i = 0 ; i < rep1; i++)
	{
		printf("-%d- %s", i+1, abo.date[i].nom);
		printf("-%d- %s", i+1, abo.date[i].date);
	}
	
// Réservation des places pour chaque spectacles 
	nbplace_resa = 1; //(Ici c'est comme si on réservez pour 1 personne)
	for(i=0; i < rep1; i++)
	{
		if(strcmp(abo.tab_spec[i].salle,frichelieu) ==0)
		{
			strcpy(parcour.spec.nom,abo.date[i].nom);
			strcpy(parcour.spec.salle,abo.tab_spec[i].salle);
			strcpy(parcour.repre.nom,parcour.spec.nom);
			strcpy(parcour.repre.date,abo.date[i].date);
			resa_richelieu ();
			strcpy(abo.rich.categorie,parcour.tab_nb_rese[0].categorie);
			strcpy(abo.rich.zone,parcour.tab_nb_rese[0].zone);
			abo.rich.numpl = parcour.tab_nb_rese[0].numpl;
			abo.rich.rangpl = parcour.tab_nb_rese[0].rangpl;
		}
		else if(strcmp(abo.tab_spec[i].salle,fstudio) ==0)
		{
			strcpy(parcour.spec.nom,abo.date[i].nom);
			strcpy(parcour.spec.salle,abo.tab_spec[i].salle);
			strcpy(parcour.repre.nom,parcour.spec.nom);
			strcpy(parcour.repre.date,abo.date[i].date);
			resa_studio();
			// transférer les données de parcour dans abo avec les infos cnocernant la rézervation studio
			
		}
	}

// Affichage récap général de l'abonnement
	printf("Récapitulatif abonnement :\n");
	for (i = 0 ; i < rep1; i++)
	{
		printf("-%d- %s", i+1, abo.date[i].nom);
		printf("-%d- %s", i+1, abo.tab_spec[i].salle);
		printf("-%d- %s", i+1, abo.date[i].date);
		printf("-%d- %s", i+1, abo.date[i].heure);
		if(strcmp(abo.tab_spec[i].salle,frichelieu) ==0)
		{
			printf("-%d- categorie : %s, zone: %s, rang : %c numéro : %d", i, abo.rich.categorie, abo.rich.zone, abo.rich.rangpl, abo.rich.numpl);
		}
		
	}
// enregistrement des données dans le fichier
// création id abonnement
	
}*/

/*------------------------------Tarifs---------------------------------*/
void tarifs()
{

	int choix = NON_TROUVE, i = 0, borne;
	FILE *f1 	;
	struct tarifs individuels;
	
	while (choix != 0)
	{
	printf("\nTarifs - Consultation\n")				;
	printf("-1- Consulter nos tarifs\n")			;
	printf("-O- Continuer\n")						;
	printf("Choix : ");
	scanf("%d", &choix);
		switch(choix)
		{
		case 1: printf("Tarifs Individuels !\n");
				f1=fopen("tarifs.txt","r");
				while (! feof(f1))
				{
					fscanf(f1, "%s %s %c %s %d", individuels.nom, individuels.type_tarifs, &individuels.categorie, individuels.type_client, &individuels.prix);
					tab_individuels[i] = individuels	;
					conv_aff(tab_individuels[i].nom);
					conv_aff(tab_individuels[i].type_tarifs);
					conv_aff(tab_individuels[i].type_client);
					i = i+1;
				}
				
				fclose(f1);
				borne = i;
				printf("tarifs importés. borne : %d\n", borne); //test
								
				for (i = 0;i < borne;i++)
				{
				//printf("i = %d\n",i); test
				conv_aff(frichelieu);
				if (strcmp(tab_individuels[i].nom,tab_individuels[i-1].nom) != 0) //pour ne pas afficher 20 fois le nom des salles
				{
				printf("\n\nSalle %s\n",tab_individuels[i].nom);
				}
				//printf("%s ", tab_individuels[i].nom);  
				printf("%20s ", tab_individuels[i].type_tarifs);
				if (strcmp(tab_individuels[i].nom,"Richelieu") == 0)
				{
				printf("catégorie %c ", tab_individuels[i].categorie);
				}
				printf("%35s", tab_individuels[i].type_client);
				printf("%20d€\n", tab_individuels[i].prix);
				}
				conv_maj(frichelieu);
				break;
		case 0 :f1=fopen("tarifs.txt","r"); //on charge les tarifs en mémoire, pour le module de paiement, même sans consultation de l'utilisateur. 
				while (! feof(f1))
				{
					fscanf(f1, "%s %s %c %s %d", individuels.nom, individuels.type_tarifs, &individuels.categorie, individuels.type_client, &individuels.prix);
					tab_individuels[i] = individuels	;
					conv_aff(tab_individuels[i].nom);
					conv_aff(tab_individuels[i].type_tarifs);
					conv_aff(tab_individuels[i].type_client);
					i = i+1;
				}
				fclose(f1); 
				printf("Quitter \n")		;
				break;
		default: printf("Choix erroné, veuillez recommencer.\n")		;
				break;
		}
	}
}
/*______________________________________________________________________________________*/
/*______________________________________________________________________________________*/

	
/*-----------!charge uniquement - aucun affichage! la liste complète des spectales par theatre------------------------------*/
void chargement_spectacle()
{
	struct spectacle representation ;	// recherche_programmation_theatre()
	FILE *f1                        ;
	int i=0				;
 
	f1=fopen("spectacle.txt","r"); //param‚Äö√†√∂‚àö¬£tre d'appelle de la variable fichier
	while(! feof(f1))
    {
    	fscanf(f1, "%s %s %s %s %s %s", representation.nom, representation.auteur, representation.M_en_scene, representation.date_debut, representation.date_fin, representation.salle);
    	tab_program[i]=representation; 
    		conv_aff(tab_program[i].nom)		;	 //Pour traiter de donn√©es sous la m√™me forme dans tout le pg
		conv_aff(tab_program[i].auteur)		;
		conv_aff(tab_program[i].M_en_scene)	;
		i=i+1;
	}
	fclose(f1);
	nbrepreglob = i; // nombre de pièces totales disponibles sur toute la comédie française
}

/*----------------chargement des représentations-------------*/
void chargement_representation()
{
	struct piece representation ;// recherche_programmation_theatre()
	FILE *f1                    ;
	int i = 0					;
 
	f1=fopen("representationchar.txt","r"); //parametre d'appelle de la variable fichier
	while(! feof(f1))
    {
    	fscanf(f1, "%s %s %s", representation.nom, representation.date, representation.heure);
    	tab_repre[i]=representation; 
  
		i=i+1;
	}
	nbspecglob = i;
	fclose(f1);
}

/*----------chargement des place de Richelieu---------------*/
void chargement_placesrichelieu()
{
	struct theatre richelieu ;// recherche_programmation_th√©√¢tre()
	FILE *f1                        ;
	int i=0							;
 
	f1=fopen("prichelieu.txt","r"); //param√®tre d'appel de la variable fichier
	while(! feof(f1))
    {
    	fscanf(f1, "%s %s %d %c", richelieu.categorie, richelieu.zone, &richelieu.numpl, &richelieu.rangpl);
    	place_richelieu[i]=richelieu; //chargement des enregistrements dans le tableau de structure

		i=i+1;
	}
	//printf("i= %d", i);
	fclose(f1);
	nbplacetot= i-1; // nombre de pi‚Äö√†√∂‚àö¬£ces totales disponibles sur toute la com‚Äö√†√∂‚àö‚Ä†die fran‚Äö√†√∂‚àö√ñaise
}


/*------convertisseurs_entree_fichier-----------------------------------*/
void conv_maj(char tab[])
{
  int i, taille ;
  
  taille = strlen(tab);
  for (i=0 ; i< taille ; i++)
  {
  	if(tab[i] == ' ')
  	{
  		tab[i] = '_';
	}
	else
	{
		tab[i] = toupper(tab[i]);
	}
    
  }
}

/*------convertisseur_affichage_fichier--------------------*/
void conv_aff(char tab[])
{
	int i, taille;
	
	taille = strlen(tab);
	for (i=1; i<taille; i++)
	{
		if(tab[i] == '_')
		{
			tab[i] = ' ';
			i++;
		}
		else
		{
		tab[i] = tolower(tab[i]);
		}
		
	}
}

/*------convertisseur_date_pour_fichier--------------------*/
void conv_date(char tab[])
{
	int i, taille;
	
	taille = strlen(tab);
	for (i=1; i<taille; i++)
	{
		if(tab[i] == '/')
		{
			tab[i] = '^';
			i++;
		}
	}
}
/*-----------initialisation tabelau----------*/
void initialisation(int tab[])
{
	int i;
	for (i=0; i<MAX_SPECTACLES; i++)
	{
		tab[i] =-1;
	}
	printf("tableau initialisé...\n");
}

